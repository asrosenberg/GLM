{
    "collab_server" : "",
    "contents" : "#####################\n## CLT Simulations ##\n#####################\n\nrm(list=ls()) # clear memory\n\n# Starting with some data\n# x is a random variable that assumes the \n# values below with probability px\nx <- c(4, 8, 15, 16, 23, 42)\npx <- c(0.3, 0.1, 0.1, 0.1, 0.3, 0.1)\nmu <- x%*%px # mean\nsum(x*px) # alt calculation of the mean\nvar <- sum(px*(x - mu)^2) # variance\nsum(px*x^2) - mu^2 # alt calculation of the variance\nset.seed(1357)\ndraws <- sample(x = x, size = 100, replace = TRUE, prob = px)\nhist(draws)\nmean(draws) # sample mean\nvar(draws) # sample variance\n\n# Option 1: Split sample into subsamples\nset.seed(1)\ndraws2 <- sample(x, 1000, replace = TRUE, prob = px)\ndraws2 <- matrix(draws2, 10) # spreads over 1000 obs over 10 rows\nsamplemeans <- apply(draws2, MARGIN = 2, FUN = mean) # takes mean in each column \nhist(samplemeans)\nvar(samplemeans)\n\n# Or you can split the sample as you generate the random deviates\nm <- matrix(rnorm(300, mean = 1, sd = sqrt(2)), 30) #rnorm\nm.m <- colMeans(m) \n\n# Option 2: For loop\nnsims <- 100\nsamplemeans2 <- rep(NA, length(nsims))\nset.seed(1)\nfor(i in 1:nsims) {\n    samplemeans2[i] <- mean(sample(x, 10, replace = TRUE, prob = px))\n}\nhist(samplemeans2)\nvar(samplemeans2)\nmean(samplemeans2)\n\n# Option 3: Use replicate()\npoisrep <- replicate(1000, mean(sample(rpois(n = 100, 5), replace = TRUE)))\nplot(density(poisrep), \n     main = \"\")\nquantile(poisrep, probs = c(0.025, 0.975)) # 95% C.I. for sample mean\n\n\n# Binomial distribution\nrm(list=ls()) # clear memory\nobs <- 30 # number of observations (random deviates)\ntrials <- 10 # number of trials in each round\np <- .5 # probability of success\nset.seed(2) # generate same list of random numbers\nbinom.dev <- rbinom(obs, trials, p) # 100 random deviates from binomial dist\ntrials*p\nmean(binom.dev) # Binom - E(X) = np\ntrials*p*(1-p) \nvar(binom.dev) \n\nnsims <- 1000\nmean_bin <- rep(NA, length(nsims))\nfor(i in 1:nsims) {\n    mean_bin[i] <- mean(rbinom(obs, trials, p))\n}\nprint(mean(mean_bin))\nprint(var(mean_bin))\n\nplot(density(mean_bin))\nhist(mean_bin, breaks=30)\n\n\n### Gaussian examples\n# Linear Regression (Single Predictor)\nn <- 100                           # number of observations\nsigma <- 1                         # error variance\nmean_e <- 0                        # expectation of error\nset.seed(56)                       # Sets string of randomly generated numbers\ne <- rnorm(n, mean_e, sigma)       # stochastic component\ne\nsummary(e)\nhist(e, \n     breaks = 10,\n     col = \"grey\", \n     main = \"Distribution of Errors\", \n     xlab = \"\")\n\n# Include density\nhist(e, \n     breaks = 10,\n     col = \"grey\",\n     freq = FALSE,                     # plot based on density\n     main = \"Distribution of Errors\", \n     xlab = \"e~Norm(0,1)\")\nlines(density(e), col = \"red2\", lwd=2) # plot density\nbox()                                  # draw box around plot\n\nx0 <- rep(1, n)                    # 1st column in X\nset.seed(493)\nx1 <- runif(n, min = -1, max = 2)  # observations of independent variable\nsummary(x1)\nhist(x1)\ndensity(x1)\ndx1 \nx <- cbind(x0, x1)                 # predictor matrix\nb0 <- 1                            # intercept\nb1 <- -2                           # change in y given 1-unit increase in x1 \nb <- c(b0, b1)                     # vector of parameters\nxb <- x%*%b                        # systematic component\ny <- xb + e                        # data\nplot(x1, y)\nabline(1-2*x1)\n\nnsims <- 1000\ny.sims <- matrix(data= NA, nrow = length(x1), ncol = nsims)\nc <- rep(NA, nsims)\ne <- rep(NA, nsims)\nfor(i in 1:nsims){\n    y.sims[,i] <- xb + rnorm(length(x1), 0, 1)\n    c[i]  <- summary(lm(y.sims[,i]~x1))$coefficients[2, 1]\n} \nhist(c) # plots simulated sampling distribution\nquantile(c, probs = c(0.025, 0.975)) # Given that b1 = -2, \n# only 5% of estimates should lie outside this range\n\n\n\n\n",
    "created" : 1484160572353.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "573855839",
    "id" : "83C9266",
    "lastKnownWriteTime" : 1421890534,
    "last_content_update" : 1421890534,
    "path" : "~/Dropbox/GLM_2017/Recitation/Recitation 2 - Simulations/Simulation Examples.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}
library(GLM)
library(GLM)
library(GLM)
library(devtools)
document()
build()
install()
library(devtools)
document()
build()
install()
birthday_problem <- function(npeople,
seed = sample.int(.Machine$integer.max, 1))
{
days <- seq(1, 365, 1)
room <- sample(days, npeople, replace = TRUE)
ifelse(length(unique(room)) < npeople, 1, 0)
}
birthday_problem(npeople = 24)
simulate_birthday_problem <- function(nsims, npeople)
{
sum(replicate(nsims, birthday_problem(npeople = npeople)))/nsims
}
simulate_birthday_problem(1000, 30)
bday_probs <- sapply(seq(2, 100, 1), simulate_birthday_problem, nsims = 1000)
plot_data <- data.table::data.table(number_of_people_in_room = seq(2, 100, 1),
probability_of_two_sharing_bday = bday_probs)
ggplot(plot_data, aes(x = number_of_people_in_room,
y = probability_of_two_sharing_bday)) +
geom_point() + theme_bw()
library(ggplot2)
library(data.table)
birthday_problem <- function(npeople,
seed = sample.int(.Machine$integer.max, 1))
{
days <- seq(1, 365, 1)
room <- sample(days, npeople, replace = TRUE)
ifelse(length(unique(room)) < npeople, 1, 0)
}
birthday_problem(npeople = 24)
simulate_birthday_problem <- function(nsims, npeople)
{
sum(replicate(nsims, birthday_problem(npeople = npeople)))/nsims
}
simulate_birthday_problem(1000, 30)
bday_probs <- sapply(seq(2, 100, 1), simulate_birthday_problem, nsims = 1000)
plot_data <- data.table::data.table(number_of_people_in_room = seq(2, 100, 1),
probability_of_two_sharing_bday = bday_probs)
ggplot(plot_data, aes(x = number_of_people_in_room,
y = probability_of_two_sharing_bday)) +
geom_point() + theme_bw()
library(ggplot2)
library(data.table)
birthday_problem <- function(npeople,
seed = sample.int(.Machine$integer.max, 1))
{
days <- seq(1, 365, 1)
room <- sample(days, npeople, replace = TRUE)
ifelse(length(unique(room)) < npeople, 1, 0)
}
birthday_problem(npeople = 24)
library(ggplot2)
library(data.table)
birthday_problem <- function(npeople,
seed = sample.int(.Machine$integer.max, 1))
{
days <- seq(1, 365, 1)
room <- sample(days, npeople, replace = TRUE)
ifelse(length(unique(room)) < npeople, 1, 0)
}
birthday_problem(npeople = 24)
library(ggplot2)
library(data.table)
birthday_problem <- function(npeople,
seed = sample.int(.Machine$integer.max, 1))
{
days <- seq(1, 365, 1)
room <- sample(days, npeople, replace = TRUE)
ifelse(length(unique(room)) < npeople, 1, 0)
}
birthday_problem(npeople = 24)
library(ggplot2)
library(data.table)
birthday_problem <- function(npeople,
seed = sample.int(.Machine$integer.max, 1))
{
days <- seq(1, 365, 1)
room <- sample(days, npeople, replace = TRUE)
ifelse(length(unique(room)) < npeople, 1, 0)
}
birthday_problem(npeople = 24)
library(ggplot2)
library(data.table)
birthday_problem <- function(npeople,
seed = sample.int(.Machine$integer.max, 1))
{
days <- seq(1, 365, 1)
room <- sample(days, npeople, replace = TRUE)
ifelse(length(unique(room)) < npeople, 1, 0)
}
birthday_problem(npeople = 24)
library(ggplot2)
library(data.table)
birthday_problem <- function(npeople,
seed = sample.int(.Machine$integer.max, 1))
{
days <- seq(1, 365, 1)
room <- sample(days, npeople, replace = TRUE)
ifelse(length(unique(room)) < npeople, 1, 0)
}
birthday_problem(npeople = 24)
simulate_birthday_problem <- function(nsims, npeople)
{
sum(replicate(nsims, birthday_problem(npeople = npeople)))/nsims
}
simulate_birthday_problem(1000, 30)
bday_probs <- sapply(seq(2, 100, 1), simulate_birthday_problem, nsims = 1000)
plot_data <- data.table::data.table(number_of_people_in_room = seq(2, 100, 1),
probability_of_two_sharing_bday = bday_probs)
ggplot(plot_data, aes(x = number_of_people_in_room,
y = probability_of_two_sharing_bday)) +
geom_point() + theme_bw() +
ggtitle("Birthday Problem Simulations")
simulate_birthday_problem(nsims = 1000, npeople = 30)
simulate_birthday_problem(nsims = 1000, npeople = 24)
simulate_birthday_problem(nsims = 1000, npeople = 24)
simulate_birthday_problem(nsims = 1000, npeople = 24)
birthday_problem <- function(npeople,
seed = sample.int(.Machine$integer.max, 1))
{
days <- seq(1, 365, 1)
room <- sample(days, npeople, replace = TRUE)
ifelse(length(unique(room)) < npeople, 1, 0)
}
birthday_problem(npeople = 24)
days <- seq(1, 365, 1)
npeople <- 24
room <- sample(days, npeople, replace = TRUE)
ifelse(length(unique(room)) < npeople, 1, 0)
simulate_birthday_problem(nsims = 1000, npeople = 24)
library(ggplot2)
library(data.table)
birthday_problem <- function(npeople,
seed = sample.int(.Machine$integer.max, 1))
{
days <- seq(1, 365, 1)
room <- sample(days, npeople, replace = TRUE)
ifelse(length(unique(room)) < npeople, 1, 0)
}
#birthday_problem(npeople = 24)
simulate_birthday_problem <- function(nsims, npeople)
{
sum(replicate(nsims, birthday_problem(npeople = npeople)))/nsims
}
simulate_birthday_problem(nsims = 1000, npeople = 24)
n <- 50
X1 <- rnorm(n)
X2 <- rnorm(n)
b0 <- 3
b1 <- -2
b2 <- 0.5
Y <- b0 + b1*X1 + b2*X2 + rnorm(n)
ggplot(Y) + geom_histogram()
qplot(Y, geom = "histogram")
qplot(Y, geom = "histogram") + theme_bw()
# DGP for OLS
n <- 500
X1 <- rnorm(n)
X2 <- rnorm(n)
b0 <- 3
b1 <- -2
b2 <- 0.5
Y <- b0 + b1*X1 + b2*X2 + rnorm(n)
qplot(Y, geom = "histogram") + theme_bw()
runif(20, -1, 1)
positions <- replicate(20, sum(runif(16, -1, 1)))
positions <- replicate(20, sum(runif(16, -1, 1)))
qplot(positions, geom = "histogram") + theme_bw()
positions <- replicate(1000, sum(runif(16, -1, 1)))
qplot(positions, geom = "histogram") + theme_bw()
?rbinom
rbinom(1)
rbinom(1, 1, 0.5)
rbinom(5, 1, 0.5)
replicate(1000, sum(rbinom(5, 1, 0.5)))
hist(replicate(1000, sum(rbinom(5, 1, 0.5))))
hist(replicate(1000, sum(rchisq(1))))
hist(replicate(1000, sum(rchisq(1, df = 5))))
hist(replicate(1000, sum(rchisq(10, df = 5))))
hist(rchisq(10))
hist(rchisq(10, df = 5))
hist(rchisq(10000, df = 5))
# DGP for OLS
n <- 500
X1 <- rnorm(n)
X2 <- rnorm(n)
b0 <- 3
b1 <- -2
b2 <- 0.5
Y <- b0 + b1*X1 + b2*X2 + rnorm(n)
g <- ggplot2::qplot(Y, geom = "histogram")
g <- theme_bw()
sample(.Machine$integer.max, 1)
test_ols <- function(n, b0, b1, b2, seed =
sample(.Machine$integer.max, 1))
{
x1 <- rnorm(n)
x2 <- rnorm(n)
y <- b0 + b1 * x1 + b2 * x2 + rnorm(n, 0, 1)
coef(lm(y ~ x1 + x2))
}
test_ols()
test_ols(n = 1000, b0 = 3, b1 = -2, b2 = 0.5)
test_ols(n = 1000, b0 = 3, b1 = -2, b2 = 0.5)
test_ols(n = 100, b0 = 3, b1 = -2, b2 = 0.5)
test_ols(n = 100, b0 = 3, b1 = -2, b2 = 0.5)
simulations <- t(replicate(1000, test_ols(n = 1000, b0 = 3, b1 = -2, b2 = 0.5)))
simulations
melt(simulations)
ggplot(plot_data, aes(value)) + geom_histogram() + facet_grid(~ Var2)
View(plot_data)
test_ols <- function(n, b0, b1, b2, seed =
sample(.Machine$integer.max, 1))
{
x1 <- rnorm(n)
x2 <- rnorm(n)
y <- b0 + b1 * x1 + b2 * x2 + rnorm(n, 0, 1)
coef(lm(y ~ x1 + x2))
}
test_ols(n = 100, b0 = 3, b1 = -2, b2 = 0.5)
simulations <- t(replicate(1000, test_ols(n = 1000, b0 = 3, b1 = -2, b2 = 0.5)))
plot_data <- melt(simulations)
View(plot_data)
ggplot(plot_data, aes(value)) + geom_histogram()
ggplot(plot_data, aes(value)) + geom_histogram() + facet_grid(~ Var2)
ggplot(plot_data, aes(value)) + geom_histogram() +
facet_grid(~ Var2, scales = "free")
real_answer_data <- data.frame(v1 = c(3, -2, 0.5), var = levels(plot_data$Var2))
ggplot(plot_data, aes(value)) + geom_histogram() +
geom_vline(aes(xintercept = vl), data = real_answer_data) +
facet_grid(~ Var2, scales = "free")
real_answer_data <- data.frame(v1 = c(3, -2, 0.5), var = levels(plot_data$Var2))
ggplot(plot_data, aes(value)) + geom_histogram() +
geom_vline(aes(xintercept = v1), data = real_answer_data) +
facet_grid(~ Var2, scales = "free")
ggplot(plot_data, aes(value)) + geom_histogram() +
geom_vline(aes(xintercept = v1), data = real_answer_data) +
facet_grid(.~ Var2, scales = "free")
View(real_answer_data)
ggplot(plot_data, aes(value)) + geom_histogram() +
facet_grid(~ Var2, scales = "free")
ggplot(plot_data, aes(value)) + geom_histogram() +
facet_grid(~ Var2, scales = "free") +
geom_vline(aes(xintercept = v1), data = real_answer_data)
real_answer_data <- data.frame(v1 = c(3, -2, 0.5),
Var2 = levels(plot_data$Var2))
ggplot(plot_data, aes(value)) + geom_histogram() +
facet_grid(~ Var2, scales = "free") +
geom_vline(aes(xintercept = v1), data = real_answer_data)
library(GLM)
input$bw_adjust
faithful$eruptions
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec(user = FALSE)
ip <- installed.packages()
pkgs.to.remove <- ip[!(ip[,"Priority"] %in% c("base", "recommended")), 1]
sapply(pkgs.to.remove, remove.packages)
install.packages("devtools")
install.packages("devtools")
install.packages("‘pbdZMQ’ ")
install.packages("pbdZMQ")
devtools::install_github('IRkernel/IRkernel')
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
devtools::install_github('IRkernel/IRkernel')
install.packages("pbdZMQ")
install.packages("uuid")
install.packages("digest")
install.packages("crayon")
install.packages("evaluate")
devtools::install_github('IRkernel/IRkernel')
devtools::install_github('IRkernel/IRkernel')
devtools
devtools::install_github('IRkernel/IRkernel')
library(devtools)
install.packages("devtools")
devtools::install_github('IRkernel/IRkernel')
library(devtools)
remove.packages("devtools")
library(devtools)
install.packages("devtools")
library("devtools")
library("devtools", dependencies = TRUE)
install.packages("devtools", dependencies = TRUE)
library(devtools)
